// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHub.Modules.Krystyna.CostManager.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyHub.Modules.Krystyna.CostManager.Infrastructure.Migrations
{
    [DbContext(typeof(CostManagerDbContext))]
    partial class CostManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.Cost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostDefinitionId")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CostDefinitionId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.CostDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("CostDefinitions");
                });

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostId")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CostId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.Cost", b =>
                {
                    b.HasOne("MyHub.Modules.Krystyna.CostManager.Core.Entities.CostDefinition", "CostDefinition")
                        .WithMany()
                        .HasForeignKey("CostDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostDefinition");
                });

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.Invoice", b =>
                {
                    b.HasOne("MyHub.Modules.Krystyna.CostManager.Core.Entities.Cost", "Cost")
                        .WithMany("Invoices")
                        .HasForeignKey("CostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cost");
                });

            modelBuilder.Entity("MyHub.Modules.Krystyna.CostManager.Core.Entities.Cost", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
